{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Scrum-Metrics"
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/postuser": {
      "post": {
        "description": "Create a new user entry in the database",
        "summary": "Post a user in the database",
        "operationId": "setUser",
        "parameters": [
          {
            "name":"body",
            "in":"body",
            "schema":{
              "$ref":"#/definitions/Users/properties/postuserbody"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created succesfully"
          },
          "400": {
            "description": "Missing data"
          },
          "409": {
            "description": "E-mail or username already in use"
          },
          "500": {
            "description": "Database error"
          }
        }
      }
    },
    "/api/login": {
      "post": {
        "description": "Grant user and password to confirm with the database of it's existance, proceeds to log in.",
        "summary": "Checks user/password to log in",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Users/properties/loginbody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User and password are correct, session token created"
          },
          "400": {
            "description": "Password is incorrect"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Database error"
          }
        }
      }
    },
    "/api/usersquery": {
      "get": {
        "description": "Get user id and username from every user in the database",
        "summary": "Get user info from database",
        "operationId": "getUsersM, getUsersA",
        "responses": {
          "200": {
            "description": "Succesfull query"
          },
          "500": {
            "description": "Database error"
          }
        }
      }
    },
    "/api/user": {
      "post": {
        "description": "Returns name, email and user id from the database with the given username",
        "summary": "Queries info from the given user",
        "operationId": "getUserInfo",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Users/properties/userbody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfull query"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Database error"
          }
        }
      }
    },
    "/api/nameupd": {
      "put": {
        "description": "Updates the given username's name with the new given name",
        "summary": "Updates user's name",
        "operationId": "updateName",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Users/properties/nameupdbody"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "User succesfully updated"
          },
          "500": {
            "description": "Database error"
          }
        }
      }
    },
    "/api/mailupd": {
      "put": {
        "description": "Updates the given username's email with the new given email",
        "summary": "Updates user's email",
        "operationId": "updateMail",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Users/properties/emailupdbody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User succesfully updated"
          },
          "500": {
            "description": "Database error"
          }
        }
      }
    },
    "/api/allupd": {
      "put": {
        "description": "Updates the given username's name and email with the new given name and email",
        "summary": "Updates user's name and email",
        "operationId": "updateAll",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Users/properties/allupdbody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated succesfully"
          },
          "500": {
            "description": "Database error"
          }
        }
      }
    },
    "/api/postproject": {
      "post": {
        "description": "Creates a new project on the database with the given information",
        "summary": "Creates a project in the database",
        "operationId": "setProject",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Users/properties/postprojectbody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project created succesfully"
          },
          "409": {
            "description": "Project name already in use"
          },
          "500": {
            "description": "Database error"
          }
        }
      }
    },
    "/api/lastproject": {
      "post": {
        "description": "Query for returning the project id that had just been created",
        "summary": "Returns last created project id",
        "operationId": "getProject",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Users/properties/lastprojectbody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project found and returned"
          },
          "404": {
            "description": "Project not found"
          },
          "500": {
            "description": "Database error"
          }
        }
      }
    },
    "/api/userprojs": {
      "post": {
        "description": "Queries the project ids from the database with the given user id",
        "summary": "Returns the projects a user is in",
        "operationId": "getUserProjects",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Users/properties/userprojectsbody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfull query"
          },
          "500": {
            "description": "Database error"
          }
        }
      }
    },
    "/api/projectinfo": {
      "post": {
        "description": "Queries the given project's info as name and description",
        "operationId": "getProjectInfo",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Users/properties/projectinfobody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Succesfull query"
          },
          "500": {
            "description": "Database error"
          }
        }
      }
    },
    "/api/postmember": {
      "post": {
        "description": "Inserts into the database every new member",
        "operationId": "setMember",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Users/properties/memberbody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Member added succesfully"
          },
          "500": {
            "description": "Database error"
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "definitions": {
    "Users": {
      "properties": {
        "loginbody": {
          "description": "User and password to log in",
          "type": "string",
          "required": true,
          "example": "{\"username\":\"test\",\"password\":\"test\"}"
        },
        "postuserbody": {
          "description": "Create a new user entry in the database",
          "type": "string",
          "required": true,
          "example": "{\"name\":\"test profile\",\"email\":\"test@test.com\",\"username\":\"test\",\"password\":\"test\"}"
        },
        "userbody": {
          "type":"string",
          "required":true,
          "example": "{\"username\":\"test\"}"
        },
        "nameupdbody": {
          "type":"string",
          "required":true,
          "example": "{\"name\":\"new name\",\"username\":\"test\"}"
        },
        "emailupdbody": {
          "type":"string",
          "required":true,
          "example": "{\"email\":\"newemail@test.com\",\"username\":\"test\"}"
        },
        "allupdbody": {
          "type":"string",
          "required":true,
          "example": "{\"name\":\"new name\",\"email\":\"newemail@test.com\",\"username\":\"test\"}"
        },
        "postprojectbody": {
          "type":"string",
          "required":true,
          "example": "{\"name\":\"testproject\",\"description\":\"project description\",\"start_date\":\"2019-09-29\",\"end_date\":null,\"image\":null}"
        },
        "lastprojectbody": {
          "type":"string",
          "required":true,
          "example": "{\"name\":\"projectname\"}"
        },
        "userprojectsbody": {
          "type":"number",
          "required":true,
          "example": "{\"userid\":1}"
        },
        "projectinfobody": {
          "type":"number",
          "required":true,
          "example": "{\"projectid\":1}"
        },
        "memberbody": {
          "type":"string",
          "required":true,
          "example": "{\"projid\":1,\"user\":1,\"role\":\"ScrumMaster\"}"
        }
      }
    }
  }
}